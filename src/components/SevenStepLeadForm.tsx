import React from 'react';
import { motion, AnimatePresence } from 'motion/react';
import { ArrowLeft, ArrowRight, CheckCircle, Phone, Mail, Building, Target, Globe, Users, CreditCard, SkipForward, MessageCircle } from 'lucide-react';
import { toast } from 'sonner@2.0.3';
import { useState } from 'react';
import { Button } from './ui/button';
import { Input } from './ui/input';
import { Label } from './ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from './ui/select';
import { Textarea } from './ui/textarea';
import { Card, CardContent } from './ui/card';
import { Progress } from './ui/progress';
import { SkipStepsWidget } from './SkipStepsWidget';

// –†–ê–ë–û–ß–ê–Ø –û–¢–ü–†–ê–í–ö–ê –í TELEGRAM
async function sendToTelegram(formData: any) {
  // –ò–ù–°–¢–†–£–ö–¶–ò–Ø: –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ @BotFather –≤ Telegram
  // 1. –ù–∞–ø–∏—à–∏—Ç–µ @BotFather
  // 2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /newbot
  // 3. –í—ã–±–µ—Ä–∏—Ç–µ –∏–º—è –∏ username –¥–ª—è –±–æ—Ç–∞
  // 4. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–æ–∫–µ–Ω –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –Ω–∏–∂–µ
  // 5. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –Ω—É–∂–Ω—ã–π —á–∞—Ç –∏ –ø–æ–ª—É—á–∏—Ç–µ chat_id
  
  const BOT_TOKEN = '7713474735:AAE6gnzckuudD7JFS4Fjktz-8svd6DToS5E'; // Jarvis Leads 2 bot
  const CHAT_ID = '8471089541'; // Chat ID for Jarvis Leads 2

  console.log('üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É...');
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
  if (BOT_TOKEN === '–í–ê–®_–ù–û–í–´–ô_–¢–û–ö–ï–ù_–ë–û–¢–ê' || CHAT_ID === '–í–ê–®_CHAT_ID') {
    console.warn('‚ö†Ô∏è –¢–æ–∫–µ–Ω –∏–ª–∏ Chat ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    toast.error('Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω', {
      description: '–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ –∫–æ–¥–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π.',
      duration: 10000
    });
    
    console.log(`
üîß –ù–ê–°–¢–†–û–ô–ö–ê TELEGRAM –ë–û–¢–ê:

1. –û—Ç–∫—Ä–æ–π—Ç–µ Telegram –∏ –Ω–∞–π–¥–∏—Ç–µ @BotFather
2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É: /newbot
3. –í—ã–±–µ—Ä–∏—Ç–µ –∏–º—è –¥–ª—è –±–æ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: Jarvis Leads Bot)
4. –í—ã–±–µ—Ä–∏—Ç–µ username (–Ω–∞–ø—Ä–∏–º–µ—Ä: jarvis_leads_bot)
5. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–æ–∫–µ–Ω –∫–æ—Ç–æ—Ä—ã–π –¥–∞—Å—Ç BotFather
6. –ó–∞–º–µ–Ω–∏—Ç–µ –≤ –∫–æ–¥–µ BOT_TOKEN –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
7. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≤–∞—à —á–∞—Ç
8. –ü–æ–ª—É—á–∏—Ç–µ chat_id –≤–∞—à–µ–≥–æ —á–∞—Ç–∞ (–º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ @userinfobot)
9. –ó–∞–º–µ–Ω–∏—Ç–µ CHAT_ID –≤ –∫–æ–¥–µ

–ó–∞—è–≤–∫–∞ –ø–æ–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –∫–æ–Ω—Å–æ–ª–∏:
`);
    console.log('üìã –î–ê–ù–ù–´–ï –ó–ê–Ø–í–ö–ò:', formData);
    
    // –í—Å–µ —Ä–∞–≤–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö, —á—Ç–æ–±—ã —Ñ–æ—Ä–º–∞ —Ä–∞–±–æ—Ç–∞–ª–∞
    return { success: true, orderNumber: Date.now() };
  }
  
  const message = `üéØ –ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –õ–ò–î–û–ì–ï–ù–ï–†–ê–¶–ò–ò

üë§ –ö–æ–Ω—Ç–∞–∫—Ç—ã:
–ò–º—è: ${formData.fullName || '-'}
–ö–æ–º–ø–∞–Ω–∏—è: ${formData.businessName || '-'}
Email: ${formData.email || '-'}
–¢–µ–ª–µ—Ñ–æ–Ω: ${formData.phone || '-'}

üìä –ë–∏–∑–Ω–µ—Å:
–û—Ç—Ä–∞—Å–ª—å: ${formData.businessSphere || '-'}
–¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è: ${formData.targetAudience || '-'}
–°—Ä–µ–¥–Ω–∏–π —á–µ–∫: ${formData.averageCheck || '-'}

üìà –ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏:
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏–¥–æ–≤: ${formData.leadCount || '-'}
–†–µ–≥–∏–æ–Ω: ${formData.leadRegion || '-'}
–ë—é–¥–∂–µ—Ç –Ω–∞ –ª–∏–¥—ã: ${formData.leadBudget || '-'}
–û–±—â–∏–π –±—é–¥–∂–µ—Ç: ${formData.monthlyBudget || '-'}

‚öôÔ∏è –£—Å–ª—É–≥–∏:
–û–±–∑–≤–æ–Ω: ${formData.needCalls ? '–î–∞' : '–ù–µ—Ç'}
–ê–Ω–∞–ª–∏—Ç–∏–∫–∞: ${formData.needAnalytics ? '–î–∞' : '–ù–µ—Ç'}
–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏: ${formData.needConsultation ? '–î–∞' : '–ù–µ—Ç'}

üìù –ü–æ–∂–µ–ª–∞–Ω–∏—è: ${formData.specialRequests || '–ù–µ—Ç'}

–í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}`;

  try {
    const form = new FormData();
    form.append('chat_id', CHAT_ID);
    form.append('text', message);
    
    const response = await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, {
      method: 'POST',
      body: form
    });
    
    const result = await response.json();
    
    if (result.ok) {
      console.log('‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Telegram!');
      return { success: true, orderNumber: Date.now() };
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞ Telegram API:', result);
      
      if (result.error_code === 401) {
        console.error('üîë –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞! –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ @BotFather');
        toast.error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞', {
          description: '–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ @BotFather –≤ Telegram'
        });
      } else if (result.error_code === 400) {
        console.error('üí¨ –ù–µ–≤–µ—Ä–Ω—ã–π chat_id –∏–ª–∏ –±–æ—Ç –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–∞—Ç');
        toast.error('–û—à–∏–±–∫–∞ chat_id', {
          description: '–î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –Ω—É–∂–Ω—ã–π —á–∞—Ç –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ chat_id'
        });
      }
      
      throw new Error(`Telegram API: ${result.description}`);
    }
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:', error);
    throw error;
  }
}

interface SevenStepLeadFormProps {
  onComplete: (formData: any) => void;
  onBack: () => void;
}

export function SevenStepLeadForm({ onComplete, onBack }: SevenStepLeadFormProps) {
  const [showWidget, setShowWidget] = useState(true);
  const [currentStep, setCurrentStep] = useState(1);
  const [formData, setFormData] = useState({
    // Step 1: Business Sphere (Industry)
    businessSphere: '',
    
    // Step 2: Contact Info
    fullName: '',
    email: '',
    phone: '',
    businessName: '',
    
    // Step 3: Target Audience & Average Check
    targetAudience: '',
    averageCheck: '',
    
    // Step 4: Competitors
    competitorUrls: [''],
    competitorAnalysis: '',
    
    // Step 5: Lead Requirements
    leadCount: '',
    leadRegion: '',
    leadBudget: '',
    
    // Step 6: Additional Services
    needCalls: false,
    needAnalytics: false,
    needConsultation: false,
    specialRequests: '',
    
    // Step 7: Budget & Timeline
    monthlyBudget: '',
    startDate: ''
  });

  const [errors, setErrors] = useState<Record<string, string>>({});

  // Step icons
  const stepIcons = [
    Building,
    Phone,
    Target,
    Globe,
    Users,
    CreditCard,
    CheckCircle
  ];

  const validateStep = () => {
    const newErrors: Record<string, string> = {};

    // –¢–æ–ª—å–∫–æ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã
    if (currentStep === 2) {
      if (!formData.fullName) {
        newErrors.fullName = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è';
      }
      if (!formData.businessName) {
        newErrors.businessName = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏';
      }
      if (!formData.email) {
        newErrors.email = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ email';
      } else if (!/\S+@\S+\.\S+/.test(formData.email)) {
        newErrors.email = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email';
      }
      if (!formData.phone) {
        newErrors.phone = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω';
      }
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleNext = () => {
    if (validateStep()) {
      if (currentStep < 7) {
        setCurrentStep(currentStep + 1);
      } else {
        handleSubmit();
      }
    }
  };

  const handleSkip = () => {
    if (currentStep < 7) {
      setCurrentStep(currentStep + 1);
    } else {
      handleSubmit();
    }
  };

  const handleContinueWithManager = () => {
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º —Å—Ä–∞–∑—É –∫ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–º –¥–∞–Ω–Ω—ã–º (—à–∞–≥ 2)
    setShowWidget(false);
    setCurrentStep(2);
  };

  const handleContinueForm = () => {
    // –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–≥–æ —à–∞–≥–∞ —Ñ–æ—Ä–º—ã
    setShowWidget(false);
    setCurrentStep(1);
  };

  const handleBack = () => {
    if (currentStep > 1) {
      setCurrentStep(currentStep - 1);
    } else {
      onBack();
    }
  };

  const handleSubmit = async () => {
    try {
      console.log('üöÄ –û–¢–ü–†–ê–í–ö–ê –ó–ê–Ø–í–ö–ò');
      console.log('üìã –î–∞–Ω–Ω—ã–µ:', formData);
      
      toast.info('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É...');
      const result = await sendToTelegram(formData);
      
      console.log('‚úÖ –£–°–ü–ï–•!');
      toast.success('–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!');
      onComplete(formData);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞:', error);
      toast.error(`–û—à–∏–±–∫–∞: ${error.message}`);
      // –í—Å–µ —Ä–∞–≤–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
      onComplete(formData);
    }
  };

  const addCompetitorField = () => {
    setFormData({
      ...formData,
      competitorUrls: [...formData.competitorUrls, '']
    });
  };

  const updateCompetitorUrl = (index: number, value: string) => {
    const newUrls = [...formData.competitorUrls];
    newUrls[index] = value;
    setFormData({
      ...formData,
      competitorUrls: newUrls
    });
  };

  const renderStep = () => {
    switch (currentStep) {
      case 1:
        return (
          <div className="space-y-6">
            {/* –ü–æ–¥—Å–∫–∞–∑–∫–∞ –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–æ–ø—É—Å–∫–∞ */}
            <div className="bg-blue-500/10 border border-blue-500/20 rounded-xl p-4">
              <div className="flex items-center space-x-2">
                <MessageCircle className="text-blue-400" size={20} />
                <p className="text-blue-200 text-sm">
                  <strong>–°–æ–≤–µ—Ç:</strong> –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ª—é–±–æ–π —ç—Ç–∞–ø, –∫—Ä–æ–º–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —É—Ç–æ—á–Ω–∏—Ç –¥–µ—Ç–∞–ª–∏ –ø—Ä–∏ –∑–≤–æ–Ω–∫–µ.
                </p>
              </div>
            </div>
            
            <div className="space-y-4">
              <p className="text-gray-300 text-lg">
                –ù–∞—á–Ω–µ–º —Å –≤—ã–±–æ—Ä–∞ –≤–∞—à–µ–π –æ—Ç—Ä–∞—Å–ª–∏, —á—Ç–æ–±—ã –ø–æ–¥–æ–±—Ä–∞—Ç—å –Ω–∞–∏–ª—É—á—à–∏–µ —Ä–µ—à–µ–Ω–∏—è –∏–º–µ–Ω–Ω–æ –¥–ª—è –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞
              </p>
              
              <div className="space-y-2">
                <Label htmlFor="businessSphere">–í –∫–∞–∫–æ–π –æ—Ç—Ä–∞—Å–ª–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤–∞—à –±–∏–∑–Ω–µ—Å? *</Label>
                <div className="relative">
                  <Select 
                    value={formData.businessSphere} 
                    onValueChange={(value) => {
                      setFormData(prev => ({ ...prev, businessSphere: value }));
                    }}
                  >
                    <SelectTrigger className={errors.businessSphere ? 'border-red-500' : ''}>
                      <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—Ä–∞—Å–ª—å" />
                    </SelectTrigger>
                    <SelectContent className="max-h-[300px] overflow-y-auto bg-gray-800 border-gray-600 text-white">
                      <SelectItem value="construction">üèóÔ∏è –°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ</SelectItem>
                      <SelectItem value="realestate">üè† –ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å</SelectItem>
                      <SelectItem value="renovation">üî® –†–µ–º–æ–Ω—Ç</SelectItem>
                      <SelectItem value="finance">üíº –§–∏–Ω–∞–Ω—Å—ã/–Æ—Ä–∏—Å–ø—Ä—É–¥–µ–Ω—Ü–∏—è</SelectItem>
                      <SelectItem value="ecommerce">üõí E-commerce</SelectItem>
                      <SelectItem value="saas">üíª IT/SaaS</SelectItem>
                      <SelectItem value="education">üéì –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ</SelectItem>
                      <SelectItem value="healthcare">‚öïÔ∏è –ú–µ–¥–∏—Ü–∏–Ω–∞</SelectItem>
                      <SelectItem value="beauty">üíÑ –ö—Ä–∞—Å–æ—Ç–∞/–ó–¥–æ—Ä–æ–≤—å–µ</SelectItem>
                      <SelectItem value="auto">üöó –ê–≤—Ç–æ–º–æ–±–∏–ª–∏</SelectItem>
                      <SelectItem value="restaurants">üçΩÔ∏è –†–µ—Å—Ç–æ—Ä–∞–Ω—ã/–ö–∞—Ñ–µ</SelectItem>
                      <SelectItem value="fitness">üí™ –§–∏—Ç–Ω–µ—Å/–°–ø–æ—Ä—Ç</SelectItem>
                      <SelectItem value="travel">‚úàÔ∏è –¢—É—Ä–∏–∑–º</SelectItem>
                      <SelectItem value="insurance">üõ°Ô∏è –°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ</SelectItem>
                      <SelectItem value="manufacturing">üè≠ –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ</SelectItem>
                      <SelectItem value="other">üîß –î—Ä—É–≥–æ–µ</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                {errors.businessSphere && <p className="text-red-500 text-sm">{errors.businessSphere}</p>}
              </div>
            </div>
          </div>
        );

      case 2:
        return (
          <div className="space-y-6">
            <div className="space-y-4">
              <p className="text-gray-300 text-lg">
                –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ –∏ —Å–≤–æ–µ–π –∫–æ–º–ø–∞–Ω–∏–∏
              </p>
            </div>
            
            <div className="space-y-2">
              <Label htmlFor="fullName">–í–∞—à–µ –∏–º—è *</Label>
              <Input
                id="fullName"
                placeholder="–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤"
                value={formData.fullName}
                onChange={(e) => setFormData(prev => ({ ...prev, fullName: e.target.value }))}
                className={errors.fullName ? 'border-red-500' : ''}
              />
              {errors.fullName && <p className="text-red-500 text-sm">{errors.fullName}</p>}
            </div>

            <div className="space-y-2">
              <Label htmlFor="businessName">–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ *</Label>
              <Input
                id="businessName"
                placeholder="–û–û–û –í–∞—à–∞ –∫–æ–º–ø–∞–Ω–∏—è"
                value={formData.businessName}
                onChange={(e) => setFormData(prev => ({ ...prev, businessName: e.target.value }))}
                className={errors.businessName ? 'border-red-500' : ''}
              />
              {errors.businessName && <p className="text-red-500 text-sm">{errors.businessName}</p>}
            </div>

            <div className="space-y-2">
              <Label htmlFor="email">Email *</Label>
              <Input
                id="email"
                type="email"
                placeholder="your@email.com"
                value={formData.email}
                onChange={(e) => setFormData(prev => ({ ...prev, email: e.target.value }))}
                className={errors.email ? 'border-red-500' : ''}
              />
              {errors.email && <p className="text-red-500 text-sm">{errors.email}</p>}
            </div>

            <div className="space-y-2">
              <Label htmlFor="phone">–¢–µ–ª–µ—Ñ–æ–Ω *</Label>
              <Input
                id="phone"
                type="tel"
                placeholder="+7 999 123 45 67"
                value={formData.phone}
                onChange={(e) => setFormData(prev => ({ ...prev, phone: e.target.value }))}
                className={errors.phone ? 'border-red-500' : ''}
              />
              {errors.phone && <p className="text-red-500 text-sm">{errors.phone}</p>}
            </div>
          </div>
        );

      case 3:
        return (
          <div className="space-y-6">
            {/* –ü–æ–¥—Å–∫–∞–∑–∫–∞ –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–æ–ø—É—Å–∫–∞ */}
            <div className="bg-blue-500/10 border border-blue-500/20 rounded-xl p-4">
              <div className="flex items-center space-x-2">
                <MessageCircle className="text-blue-400" size={20} />
                <p className="text-blue-200 text-sm">
                  <strong>–ü–æ–¥—Å–∫–∞–∑–∫–∞:</strong> –≠—Ç–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–º–æ–≥—É—Ç —Ç–æ—á–Ω–µ–µ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å, –Ω–æ –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –∏—Ö –º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.
                </p>
              </div>
            </div>
            
            <div className="space-y-4">
              <p className="text-gray-300 text-lg">
                –î–∞–≤–∞–π—Ç–µ —Ä–∞–∑–±–µ—Ä–µ–º—Å—è —Å –≤–∞—à–µ–π —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–µ–π –∏ —Å—Ä–µ–¥–Ω–∏–º —á–µ–∫–æ–º
              </p>
            </div>

            <div className="space-y-2">
              <Label htmlFor="targetAudience">–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é</Label>
              <Textarea
                id="targetAudience"
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –í–ª–∞–¥–µ–ª—å—Ü—ã –∫–≤–∞—Ä—Ç–∏—Ä –≤ –Ω–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∞—Ö –ú–æ—Å–∫–≤—ã, –≤–æ–∑—Ä–∞—Å—Ç 25-45 –ª–µ—Ç, –¥–æ—Ö–æ–¥ –æ—Ç 100–∫ —Ä—É–±–ª–µ–π"
                value={formData.targetAudience}
                onChange={(e) => setFormData(prev => ({ ...prev, targetAudience: e.target.value }))}
                rows={3}
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="averageCheck">–°—Ä–µ–¥–Ω–∏–π —á–µ–∫ –≤–∞—à–µ–π —É—Å–ª—É–≥–∏/—Ç–æ–≤–∞—Ä–∞</Label>
              <div className="relative">
                <Select 
                  value={formData.averageCheck} 
                  onValueChange={(value) => setFormData(prev => ({ ...prev, averageCheck: value }))}
                >
                  <SelectTrigger>
                    <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω" />
                  </SelectTrigger>
                  <SelectContent className="max-h-[300px] overflow-y-auto bg-gray-900/95 backdrop-blur-sm border-gray-700 text-white">
                    <SelectItem value="under-50k" className="bg-gray-900 hover:bg-gray-800 text-white focus:bg-gray-800">üí∞ –î–æ 50 000‚ÇΩ</SelectItem>
                    <SelectItem value="50k-100k" className="bg-gray-900 hover:bg-gray-800 text-white focus:bg-gray-800">üíé 50 000 - 100 000‚ÇΩ</SelectItem>
                    <SelectItem value="100k-500k" className="bg-gray-900 hover:bg-gray-800 text-white focus:bg-gray-800">üèÜ 100 000 - 500 000‚ÇΩ</SelectItem>
                    <SelectItem value="500k-1m" className="bg-gray-900 hover:bg-gray-800 text-white focus:bg-gray-800">üíº 500 000 - 1 000 000‚ÇΩ</SelectItem>
                    <SelectItem value="over-1m" className="bg-gray-900 hover:bg-gray-800 text-white focus:bg-gray-800">üëë –°–≤—ã—à–µ 1 000 000‚ÇΩ</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>
          </div>
        );

      case 4:
        return (
          <div className="space-y-6">
            {/* –ü–æ–¥—Å–∫–∞–∑–∫–∞ –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–æ–ø—É—Å–∫–∞ */}
            <div className="bg-blue-500/10 border border-blue-500/20 rounded-xl p-4">
              <div className="flex items-center space-x-2">
                <MessageCircle className="text-blue-400" size={20} />
                <p className="text-blue-200 text-sm">
                  <strong>–ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ:</strong> –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –ø–æ–º–æ–∂–µ—Ç —É–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –ª–∏–¥–æ–≤, –Ω–æ —ç—Ç–æ—Ç —à–∞–≥ –º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.
                </p>
              </div>
            </div>
            
            <div className="space-y-4">
              <p className="text-gray-300 text-lg">
                –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–∏—Ö –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞—Ö - —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å —Ä—ã–Ω–æ–∫
              </p>
            </div>

            <div className="space-y-4">
              <Label>–°–∞–π—Ç—ã –≤–∞—à–∏—Ö –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤</Label>
              {formData.competitorUrls.map((url, index) => (
                <Input
                  key={index}
                  placeholder="https://competitor-site.com"
                  value={url}
                  onChange={(e) => updateCompetitorUrl(index, e.target.value)}
                />
              ))}
              <Button
                variant="outline"
                onClick={addCompetitorField}
                className="w-full"
              >
                + –î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞
              </Button>
            </div>

            <div className="space-y-2">
              <Label htmlFor="competitorAnalysis">–ß—Ç–æ –≤–∞—Å –ø—Ä–∏–≤–ª–µ–∫–∞–µ—Ç –≤ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞—Ö?</Label>
              <Textarea
                id="competitorAnalysis"
                placeholder="–û–ø–∏—à–∏—Ç–µ —á—Ç–æ –≤–∞–º –Ω—Ä–∞–≤–∏—Ç—Å—è –≤ —Ä–∞–±–æ—Ç–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤"
                value={formData.competitorAnalysis}
                onChange={(e) => setFormData(prev => ({ ...prev, competitorAnalysis: e.target.value }))}
                rows={3}
              />
            </div>
          </div>
        );

      case 5:
        return (
          <div className="space-y-6">
            {/* –ü–æ–¥—Å–∫–∞–∑–∫–∞ –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–æ–ø—É—Å–∫–∞ */}
            <div className="bg-blue-500/10 border border-blue-500/20 rounded-xl p-4">
              <div className="flex items-center space-x-2">
                <MessageCircle className="text-blue-400" size={20} />
                <p className="text-blue-200 text-sm">
                  <strong>–í–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</strong> –ß–µ–º —Ç–æ—á–Ω–µ–µ —É–∫–∞–∂–µ—Ç–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è, —Ç–µ–º –ª—É—á—à–µ –±—É–¥–µ—Ç —Ä–∞—Å—á–µ—Ç. –ù–æ –º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∏ –æ–±—Å—É–¥–∏—Ç—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.
                </p>
              </div>
            </div>
            
            <div className="space-y-3">
              <Label>–°–∫–æ–ª—å–∫–æ –ª–∏–¥–æ–≤ –≤–∞–º –Ω—É–∂–Ω–æ –≤ –º–µ—Å—è—Ü?</Label>
              <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                {[
                  { value: "50-100", label: "50-100 –ª–∏–¥–æ–≤" },
                  { value: "100-300", label: "100-300 –ª–∏–¥–æ–≤" },
                  { value: "300-500", label: "300-500 –ª–∏–¥–æ–≤" },
                  { value: "500-1000", label: "500-1000 –ª–∏–¥–æ–≤" },
                  { value: "1000+", label: "–°–≤—ã—à–µ 1000 –ª–∏–¥–æ–≤" },
                  { value: "custom", label: "–î—Ä—É–≥–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ" }
                ].map((option) => (
                  <motion.div
                    key={option.value}
                    whileHover={{ scale: 1.02 }}
                    whileTap={{ scale: 0.98 }}
                  >
                    <Button
                      variant={formData.leadCount === option.value ? "default" : "outline"}
                      onClick={() => setFormData(prev => ({ ...prev, leadCount: option.value }))}
                      className={`w-full p-4 h-auto text-left ${
                        formData.leadCount === option.value 
                          ? 'bg-gradient-to-r from-orange-500 to-orange-600 text-white' 
                          : 'hover:border-orange-500/50'
                      }`}
                    >
                      {option.label}
                    </Button>
                  </motion.div>
                ))}
              </div>
            </div>

            <div className="space-y-2">
              <Label htmlFor="leadRegion">–í –∫–∞–∫–æ–º —Ä–µ–≥–∏–æ–Ω–µ –Ω—É–∂–Ω—ã –ª–∏–¥—ã?</Label>
              <Input
                id="leadRegion"
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞, –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, –≤—Å—è –†–æ—Å—Å–∏—è"
                value={formData.leadRegion}
                onChange={(e) => setFormData(prev => ({ ...prev, leadRegion: e.target.value }))}
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="leadBudget">–ë—é–¥–∂–µ—Ç –Ω–∞ –ª–∏–¥–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤ –º–µ—Å—è—Ü</Label>
              <div className="relative">
                <Select 
                  value={formData.leadBudget} 
                  onValueChange={(value) => setFormData(prev => ({ ...prev, leadBudget: value }))}
                >
                  <SelectTrigger>
                    <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –±—é–¥–∂–µ—Ç" />
                  </SelectTrigger>
                  <SelectContent className="max-h-[300px] overflow-y-auto bg-gray-900/95 backdrop-blur-sm border-gray-700 text-white">
                    <SelectItem value="50k-100k" className="bg-gray-900 hover:bg-gray-800 text-white focus:bg-gray-800">üí∞ 50 000 - 100 000‚ÇΩ</SelectItem>
                    <SelectItem value="100k-200k" className="bg-gray-900 hover:bg-gray-800 text-white focus:bg-gray-800">üíé 100 000 - 200 000‚ÇΩ</SelectItem>
                    <SelectItem value="200k-500k" className="bg-gray-900 hover:bg-gray-800 text-white focus:bg-gray-800">üèÜ 200 000 - 500 000‚ÇΩ</SelectItem>
                    <SelectItem value="500k-1m" className="bg-gray-900 hover:bg-gray-800 text-white focus:bg-gray-800">üíº 500 000 - 1 000 000‚ÇΩ</SelectItem>
                    <SelectItem value="over-1m" className="bg-gray-900 hover:bg-gray-800 text-white focus:bg-gray-800">üëë –°–≤—ã—à–µ 1 000 000‚ÇΩ</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>
          </div>
        );

      case 6:
        return (
          <div className="space-y-6">
            {/* –ü–æ–¥—Å–∫–∞–∑–∫–∞ –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–æ–ø—É—Å–∫–∞ */}
            <div className="bg-blue-500/10 border border-blue-500/20 rounded-xl p-4">
              <div className="flex items-center space-x-2">
                <MessageCircle className="text-blue-400" size={20} />
                <p className="text-blue-200 text-sm">
                  <strong>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏:</strong> –í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ –ø–æ–º–∏–º–æ –ª–∏–¥–æ–≤. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç —Å—Ä–∞–∑—É –≤–∫–ª—é—á–∏—Ç—å –≤—Å–µ –≤ —Ä–∞—Å—á–µ—Ç.
                </p>
              </div>
            </div>
            
            <div className="space-y-4">
              <p className="text-gray-300 text-lg">
                –ö–∞–∫–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç?
              </p>
            </div>

            <div className="space-y-4">
              <div className="flex items-center space-x-3">
                <input
                  type="checkbox"
                  id="needCalls"
                  checked={formData.needCalls}
                  onChange={(e) => setFormData(prev => ({ ...prev, needCalls: e.target.checked }))}
                  className="w-5 h-5 text-orange-500 bg-gray-700 border-gray-600 rounded focus:ring-orange-500"
                />
                <Label htmlFor="needCalls" className="flex-1">
                  <div>
                    <p className="font-medium">‚òéÔ∏è –û–±–∑–≤–æ–Ω –ª–∏–¥–æ–≤ –Ω–∞—à–∏–º–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º–∏</p>
                    <p className="text-sm text-gray-400">–ù–∞—à –∫–æ–ª–ª-—Ü–µ–Ω—Ç—Ä –æ–±–∑–≤–æ–Ω–∏—Ç –≤—Å–µ—Ö –ª–∏–¥–æ–≤ –∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç –∏—Ö –æ –≤–∞—à–µ–º –∑–≤–æ–Ω–∫–µ</p>
                  </div>
                </Label>
              </div>

              <div className="flex items-center space-x-3">
                <input
                  type="checkbox"
                  id="needAnalytics"
                  checked={formData.needAnalytics}
                  onChange={(e) => setFormData(prev => ({ ...prev, needAnalytics: e.target.checked }))}
                  className="w-5 h-5 text-orange-500 bg-gray-700 border-gray-600 rounded focus:ring-orange-500"
                />
                <Label htmlFor="needAnalytics" className="flex-1">
                  <div>
                    <p className="font-medium">üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã</p>
                    <p className="text-sm text-gray-400">–î–µ—Ç–∞–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –ø–æ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏, –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º, –∫–∞—á–µ—Å—Ç–≤—É –ª–∏–¥–æ–≤</p>
                  </div>
                </Label>
              </div>

              <div className="flex items-center space-x-3">
                <input
                  type="checkbox"
                  id="needConsultation"
                  checked={formData.needConsultation}
                  onChange={(e) => setFormData(prev => ({ ...prev, needConsultation: e.target.checked }))}
                  className="w-5 h-5 text-orange-500 bg-gray-700 border-gray-600 rounded focus:ring-orange-500"
                />
                <Label htmlFor="needConsultation" className="flex-1">
                  <div>
                    <p className="font-medium">üí° –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ –≤–æ—Ä–æ–Ω–∫–µ –ø—Ä–æ–¥–∞–∂</p>
                    <p className="text-sm text-gray-400">–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥–∞ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –∫–æ–Ω–≤–µ—Ä—Å–∏–∏</p>
                  </div>
                </Label>
              </div>
            </div>

            <div className="space-y-2">
              <Label htmlFor="specialRequests">–û—Å–æ–±—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è –∏–ª–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è</Label>
              <Textarea
                id="specialRequests"
                placeholder="–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –ª—é–±—ã—Ö –æ—Å–æ–±—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è—Ö –∫ –ª–∏–¥–∞–º –∏–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å—É —Ä–∞–±–æ—Ç—ã"
                value={formData.specialRequests}
                onChange={(e) => setFormData(prev => ({ ...prev, specialRequests: e.target.value }))}
                rows={3}
              />
            </div>
          </div>
        );

      case 7:
        return (
          <div className="space-y-6">
            <div className="bg-green-500/10 border border-green-500/20 rounded-xl p-4">
              <div className="flex items-center space-x-2">
                <CheckCircle className="text-green-400" size={20} />
                <p className="text-green-200 text-sm">
                  <strong>–§–∏–Ω–∞–ª—å–Ω—ã–π —à–∞–≥:</strong> –£–∫–∞–∂–∏—Ç–µ –±—é–¥–∂–µ—Ç –∏ –∂–µ–ª–∞–µ–º—ã–µ —Å—Ä–æ–∫–∏ –∑–∞–ø—É—Å–∫–∞.
                </p>
              </div>
            </div>
            
            <div className="space-y-4">
              <p className="text-gray-300 text-lg">
                –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ—Ç–∞–ª–∏ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
              </p>
            </div>

            <div className="space-y-2">
              <Label htmlFor="monthlyBudget">–û–±—â–∏–π –º–µ—Å—è—á–Ω—ã–π –±—é–¥–∂–µ—Ç –Ω–∞ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥</Label>
              <div className="relative">
                <Select 
                  value={formData.monthlyBudget} 
                  onValueChange={(value) => setFormData(prev => ({ ...prev, monthlyBudget: value }))}
                >
                  <SelectTrigger>
                    <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –±—é–¥–∂–µ—Ç" />
                  </SelectTrigger>
                  <SelectContent className="max-h-[300px] overflow-y-auto bg-gray-900/95 backdrop-blur-sm border-gray-700 text-white">
                    <SelectItem value="under-100k" className="bg-gray-900 hover:bg-gray-800 text-white focus:bg-gray-800">üí∞ –î–æ 100 000‚ÇΩ</SelectItem>
                    <SelectItem value="100k-300k" className="bg-gray-900 hover:bg-gray-800 text-white focus:bg-gray-800">üíé 100 000 - 300 000‚ÇΩ</SelectItem>
                    <SelectItem value="300k-500k" className="bg-gray-900 hover:bg-gray-800 text-white focus:bg-gray-800">üèÜ 300 000 - 500 000‚ÇΩ</SelectItem>
                    <SelectItem value="500k-1m" className="bg-gray-900 hover:bg-gray-800 text-white focus:bg-gray-800">üíº 500 000 - 1 000 000‚ÇΩ</SelectItem>
                    <SelectItem value="over-1m" className="bg-gray-900 hover:bg-gray-800 text-white focus:bg-gray-800">üëë –°–≤—ã—à–µ 1 000 000‚ÇΩ</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>

            <div className="space-y-2">
              <Label htmlFor="startDate">–ö–æ–≥–¥–∞ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –Ω–∞—á–∞—Ç—å?</Label>
              <div className="relative">
                <Select 
                  value={formData.startDate} 
                  onValueChange={(value) => setFormData(prev => ({ ...prev, startDate: value }))}
                >
                  <SelectTrigger>
                    <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫–∏" />
                  </SelectTrigger>
                  <SelectContent className="max-h-[300px] overflow-y-auto bg-gray-900/95 backdrop-blur-sm border-gray-700 text-white">
                    <SelectItem value="asap" className="bg-gray-900 hover:bg-gray-800 text-white focus:bg-gray-800">üöÄ –ö–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ</SelectItem>
                    <SelectItem value="this-week" className="bg-gray-900 hover:bg-gray-800 text-white focus:bg-gray-800">üìÖ –ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ</SelectItem>
                    <SelectItem value="this-month" className="bg-gray-900 hover:bg-gray-800 text-white focus:bg-gray-800">üìÜ –í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ</SelectItem>
                    <SelectItem value="next-month" className="bg-gray-900 hover:bg-gray-800 text-white focus:bg-gray-800">‚è≠Ô∏è –í —Å–ª–µ–¥—É—é—â–µ–º –º–µ—Å—è—Ü–µ</SelectItem>
                    <SelectItem value="later" className="bg-gray-900 hover:bg-gray-800 text-white focus:bg-gray-800">‚è∞ –ü–æ–∑–∂–µ</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>

            <div className="bg-gradient-to-r from-orange-500/10 to-orange-600/10 border border-orange-500/30 rounded-xl p-4">
              <p className="text-orange-200 text-sm">
                <strong>–ì–æ—Ç–æ–≤–æ!</strong> –ù–∞–∂–º–∏—Ç–µ "–û—Ç–ø—Ä–∞–≤–∏ÔøΩÔøΩ—å –∑–∞—è–≤–∫—É" –∏ –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –º–∏–Ω—É—Ç –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.
              </p>
            </div>
          </div>
        );

      default:
        return null;
    }
  };

  // Show widget first
  if (showWidget) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-gray-900 via-gray-800 to-gray-900 py-4 sm:py-8 px-2 sm:px-4 flex items-center justify-center pb-safe-bottom">
        <div className="w-full max-w-2xl mx-auto">
          <Card className="bg-gray-800/90 backdrop-blur-sm border-gray-700 shadow-2xl rounded-2xl sm:rounded-3xl">
            <CardContent className="p-4 sm:p-6 lg:p-8">
              <SkipStepsWidget onContinueWithManager={handleContinueWithManager} onContinueForm={handleContinueForm} />
            </CardContent>
          </Card>
        </div>
      </div>
    );
  }

  const IconComponent = stepIcons[currentStep - 1];
  const progress = (currentStep / 7) * 100;

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-900 via-gray-800 to-gray-900 py-4 sm:py-8 px-2 sm:px-4 pb-safe-bottom">
      <div className="max-w-2xl mx-auto">
        <Card className="bg-gray-800/90 backdrop-blur-sm border-gray-700 shadow-2xl rounded-2xl sm:rounded-3xl">
          <CardContent className="p-4 sm:p-6 lg:p-8">
            {/* Header */}
            <div className="mb-6 sm:mb-8">
              <div className="flex items-center justify-between mb-4">
                <Button
                  variant="ghost"
                  onClick={handleBack}
                  className="text-gray-400 hover:text-white p-2 sm:p-3"
                  size="sm"
                >
                  <ArrowLeft className="w-4 h-4 mr-1 sm:mr-2" />
                  <span className="hidden sm:inline">–ù–∞–∑–∞–¥</span>
                </Button>
                <div className="text-xs sm:text-sm text-gray-400">
                  –®–∞–≥ {currentStep} –∏–∑ 7
                </div>
              </div>

              <div className="flex items-center space-x-3 mb-4">
                <div className="p-2 bg-orange-500/20 rounded-lg flex-shrink-0">
                  <IconComponent className="w-5 h-5 sm:w-6 sm:h-6 text-orange-400" />
                </div>
                <div className="min-w-0 flex-1">
                  <h2 className="text-lg sm:text-xl text-white font-semibold leading-tight">
                    {currentStep === 1 && "–û—Ç—Ä–∞—Å–ª—å –±–∏–∑–Ω–µ—Å–∞"}
                    {currentStep === 2 && "–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"}
                    {currentStep === 3 && "–¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è"}
                    {currentStep === 4 && "–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã"}
                    {currentStep === 5 && "–ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –≤ –ª–∏–¥–∞—Ö"}
                    {currentStep === 6 && "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏"}
                    {currentStep === 7 && "–ë—é–¥–∂–µ—Ç –∏ —Å—Ä–æ–∫–∏"}
                  </h2>
                </div>
              </div>

              <Progress value={progress} className="h-2" />
            </div>

            {/* Step Content */}
            <AnimatePresence mode="wait">
              <motion.div
                key={currentStep}
                initial={{ opacity: 0, x: 20 }}
                animate={{ opacity: 1, x: 0 }}
                exit={{ opacity: 0, x: -20 }}
                transition={{ duration: 0.3 }}
              >
                {renderStep()}
              </motion.div>
            </AnimatePresence>

            {/* Navigation */}
            <div className="flex flex-col-reverse sm:flex-row items-stretch sm:items-center justify-between mt-6 sm:mt-8 pt-4 sm:pt-6 border-t border-gray-700 gap-3 sm:gap-0">
              <div className="flex justify-center sm:justify-start">
                {currentStep > 2 && (
                  <Button
                    variant="outline"
                    onClick={handleSkip}
                    className="border-gray-600 text-gray-300 hover:bg-gray-700 px-4 py-2 sm:px-6 sm:py-3"
                    size="sm"
                  >
                    <SkipForward className="w-4 h-4 mr-1 sm:mr-2" />
                    <span className="text-sm sm:text-base">–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å</span>
                  </Button>
                )}
              </div>

              <Button
                onClick={handleNext}
                className="bg-gradient-to-r from-orange-500 to-orange-600 hover:from-orange-600 hover:to-orange-700 text-white px-6 sm:px-8 py-3 sm:py-4 w-full sm:w-auto text-base sm:text-lg font-semibold"
              >
                {currentStep === 7 ? '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É' : '–î–∞–ª–µ–µ'}
                <ArrowRight className="w-4 h-4 ml-2" />
              </Button>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}